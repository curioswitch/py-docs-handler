# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: greet.proto

from collections.abc import Iterable, Mapping
from typing import Protocol

from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)

from . import greet_pb2 as greet__pb2


class GreetService(Protocol):
    async def greet(
        self, request: greet__pb2.GreetingRequest, ctx: RequestContext
    ) -> greet__pb2.GreetingResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class GreetServiceASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: GreetService,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/greet.GreetService/Greet": Endpoint.unary(
                    method=MethodInfo(
                        name="Greet",
                        service_name="greet.GreetService",
                        input=greet__pb2.GreetingRequest,
                        output=greet__pb2.GreetingResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.greet,
                )
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/greet.GreetService"


class GreetServiceClient(ConnecpyClient):
    async def greet(
        self,
        request: greet__pb2.GreetingRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> greet__pb2.GreetingResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Greet",
                service_name="greet.GreetService",
                input=greet__pb2.GreetingRequest,
                output=greet__pb2.GreetingResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class GreetServiceSync(Protocol):
    def greet(
        self, request: greet__pb2.GreetingRequest, ctx: RequestContext
    ) -> greet__pb2.GreetingResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class GreetServiceWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: GreetServiceSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/greet.GreetService/Greet": EndpointSync.unary(
                    method=MethodInfo(
                        name="Greet",
                        service_name="greet.GreetService",
                        input=greet__pb2.GreetingRequest,
                        output=greet__pb2.GreetingResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.greet,
                )
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/greet.GreetService"


class GreetServiceClientSync(ConnecpyClientSync):
    def greet(
        self,
        request: greet__pb2.GreetingRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> greet__pb2.GreetingResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Greet",
                service_name="greet.GreetService",
                input=greet__pb2.GreetingRequest,
                output=greet__pb2.GreetingResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
