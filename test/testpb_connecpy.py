# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: testpb.proto

from collections.abc import Iterable, Mapping
from typing import Protocol

import testpb_pb2 as testpb__pb2
from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import (
    ConnecpyASGIApplication,
    ConnecpyWSGIApplication,
    Endpoint,
    EndpointSync,
)


class TestService(Protocol):
    async def unary_call_with_all_different_parameter_types(
        self, request: testpb__pb2.ExtendedTestMessage, ctx: RequestContext
    ) -> testpb__pb2.ExtendedTestMessage:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class TestServiceASGIApplication(ConnecpyASGIApplication):
    def __init__(
        self,
        service: TestService,
        *,
        interceptors: Iterable[Interceptor] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/armeria.grpc.testing.TestService/UnaryCallWithAllDifferentParameterTypes": Endpoint.unary(
                    method=MethodInfo(
                        name="UnaryCallWithAllDifferentParameterTypes",
                        service_name="armeria.grpc.testing.TestService",
                        input=testpb__pb2.ExtendedTestMessage,
                        output=testpb__pb2.ExtendedTestMessage,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unary_call_with_all_different_parameter_types,
                )
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/armeria.grpc.testing.TestService"


class TestServiceClient(ConnecpyClient):
    async def unary_call_with_all_different_parameter_types(
        self,
        request: testpb__pb2.ExtendedTestMessage,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> testpb__pb2.ExtendedTestMessage:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UnaryCallWithAllDifferentParameterTypes",
                service_name="armeria.grpc.testing.TestService",
                input=testpb__pb2.ExtendedTestMessage,
                output=testpb__pb2.ExtendedTestMessage,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class TestServiceSync(Protocol):
    def unary_call_with_all_different_parameter_types(
        self, request: testpb__pb2.ExtendedTestMessage, ctx: RequestContext
    ) -> testpb__pb2.ExtendedTestMessage:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class TestServiceWSGIApplication(ConnecpyWSGIApplication):
    def __init__(
        self,
        service: TestServiceSync,
        interceptors: Iterable[InterceptorSync] = (),
        read_max_bytes: int | None = None,
    ) -> None:
        super().__init__(
            endpoints={
                "/armeria.grpc.testing.TestService/UnaryCallWithAllDifferentParameterTypes": EndpointSync.unary(
                    method=MethodInfo(
                        name="UnaryCallWithAllDifferentParameterTypes",
                        service_name="armeria.grpc.testing.TestService",
                        input=testpb__pb2.ExtendedTestMessage,
                        output=testpb__pb2.ExtendedTestMessage,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.unary_call_with_all_different_parameter_types,
                )
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/armeria.grpc.testing.TestService"


class TestServiceClientSync(ConnecpyClientSync):
    def unary_call_with_all_different_parameter_types(
        self,
        request: testpb__pb2.ExtendedTestMessage,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> testpb__pb2.ExtendedTestMessage:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="UnaryCallWithAllDifferentParameterTypes",
                service_name="armeria.grpc.testing.TestService",
                input=testpb__pb2.ExtendedTestMessage,
                output=testpb__pb2.ExtendedTestMessage,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
